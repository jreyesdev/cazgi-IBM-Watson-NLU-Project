{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","className","map","val","i","props","emotions","React","Component","App","state","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","renderTextArea","document","getElementById","value","setState","renderTextBox","sendForSentimentAnalysis","url","fetch","then","response","text","data","output","style","color","fontSize","sendForEmotionAnalysis","json","onClick","this","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"8QAyBeA,E,4JArBX,WAAU,IAAD,OAEP,OACE,8BAEE,uBAAOC,UAAU,uBAAjB,SACE,gCALO,CAAC,UAAU,MAAM,OAAO,UAAU,SAQlCC,KAAI,SAACC,EAAIC,GAAL,OAAW,+BAClB,6BAAKD,IACL,6BAAK,EAAKE,MAAMC,SAASH,OAFEC,gB,GAVhBG,IAAMC,WCwFlBC,E,4MArFbC,MAAQ,CAACC,UAAU,0BAAUC,KAAK,IAAIC,KAAK,KAAKC,GAAG,cACzCC,KAAM,OACRC,gBAAgB,GAChBC,WAAU,G,EAGlBC,eAAiB,WACfC,SAASC,eAAe,aAAaC,MAAQ,GACtB,QAApB,EAAKX,MAAMK,MACZ,EAAKO,SAAS,CAACX,UAAU,0BAAUC,KAAK,IAAIC,KAAK,KAAKC,GAAG,cACzDC,KAAM,OACNC,gBAAgB,GAChBC,WAAU,K,EAKdM,cAAgB,WACdJ,SAASC,eAAe,aAAaC,MAAQ,GACtB,SAApB,EAAKX,MAAMK,MACZ,EAAKO,SAAS,CAACX,UAAU,0BAAUC,KAAK,IAAIC,KAAK,KAAKC,GAAG,cACzDC,KAAM,MACNC,gBAAgB,GAChBC,WAAU,K,EAKdO,yBAA2B,WACzB,EAAKF,SAAS,CAACL,WAAU,IACzB,IAAIQ,EAAM,GAGRA,EADqB,QAApB,EAAKf,MAAMK,KACNU,EAAI,sBAAsBN,SAASC,eAAe,aAAaC,MAE/DI,EAAI,wBAAwBN,SAASC,eAAe,aAAaC,MAEzEK,MAAMD,GAAKE,MAAK,SAACC,GACbA,EAASC,OAAOF,MAAK,SAACG,GACtB,EAAKR,SAAS,CAACN,gBAAgBc,IAC/B,IAAIC,EAASD,EAEXC,EADU,aAATD,EACQ,qBAAKE,MAAO,CAACC,MAAM,QAAQC,SAAS,IAApC,SAA0CJ,IACjC,aAATA,EACA,qBAAKE,MAAO,CAACC,MAAM,MAAMC,SAAS,IAAlC,SAAwCJ,IAExC,qBAAKE,MAAO,CAACC,MAAM,SAASC,SAAS,IAArC,SAA2CJ,IAEtD,EAAKR,SAAS,CAACN,gBAAgBe,W,EAIrCI,uBAAyB,WAEvB,EAAKb,SAAS,CAACL,WAAU,IACzB,IAAIQ,EAAM,GAERA,EADqB,QAApB,EAAKf,MAAMK,KACNU,EAAI,oBAAoBN,SAASC,eAAe,aAAaC,MAE7DI,EAAI,sBAAsBN,SAASC,eAAe,aAAaC,MAEvEK,MAAMD,GAAKE,MAAK,SAACC,GACfA,EAASQ,OAAOT,MAAK,SAACG,GACtB,EAAKR,SAAS,CAACN,gBAAgB,cAAC,EAAD,CAAcV,SAAUwB,a,4CAK3D,WACE,OACE,sBAAK7B,UAAU,MAAf,UACA,wBAAQA,UAAU,eAAeoC,QAASC,KAAKpB,eAA/C,kBACE,wBAAQjB,UAAU,eAAgBoC,QAASC,KAAKf,cAAhD,iBACA,uBAAK,uBACJe,KAAK5B,MAAMC,UACZ,uBACA,wBAAQV,UAAU,cAAcoC,QAASC,KAAKd,yBAA9C,+BACA,wBAAQvB,UAAU,cAAcoC,QAASC,KAAKH,uBAA9C,6BACA,uBACKG,KAAK5B,MAAMM,uB,GAhFNT,IAAMC,WCOT+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF9B,SAASC,eAAe,SAM1BmB,K","file":"static/js/main.e166d535.chunk.js","sourcesContent":["import React from 'react';\r\nimport './bootstrap.min.css';\r\n\r\nclass EmotionTable extends React.Component {\r\n    render() {\r\n      const keys = ['sadness','joy','fear','disgust','anger']\r\n      return (  \r\n        <div>\r\n          {/*You can remove this line and the line below. */}\r\n          <table className=\"table table-bordered\">\r\n            <tbody>\r\n            {\r\n              //Write code to use the .map method that you worked on in the Hands-on React lab to extract the emotions\r\n              keys.map((val,i) => <tr key={i}>\r\n                <td>{val}</td>\r\n                <td>{this.props.emotions[val]}</td>\r\n              </tr>)\r\n            }\r\n            </tbody>\r\n          </table>\r\n          </div>\r\n          );\r\n        }\r\n    \r\n}\r\nexport default EmotionTable;","import './bootstrap.min.css';\r\nimport './App.css';\r\nimport EmotionTable from './EmotionTable.js';\r\nimport React from 'react';\r\n\r\nclass App extends React.Component {\r\n  state = {innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\r\n            mode: \"text\",\r\n          sentimentOutput:[],\r\n          sentiment:true\r\n        }\r\n  \r\n  renderTextArea = ()=>{\r\n    document.getElementById(\"textinput\").value = \"\";\r\n    if(this.state.mode === \"url\") {\r\n      this.setState({innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\r\n      mode: \"text\",\r\n      sentimentOutput:[],\r\n      sentiment:true\r\n    })\r\n    } \r\n  }\r\n\r\n  renderTextBox = ()=>{\r\n    document.getElementById(\"textinput\").value = \"\";\r\n    if(this.state.mode === \"text\") {\r\n      this.setState({innercomp:<textarea rows=\"1\" cols=\"50\" id=\"textinput\"/>,\r\n      mode: \"url\",\r\n      sentimentOutput:[],\r\n      sentiment:true\r\n    })\r\n    }\r\n  }\r\n\r\n  sendForSentimentAnalysis = () => {\r\n    this.setState({sentiment:true});\r\n    let url = '';\r\n\r\n    if(this.state.mode === \"url\") {\r\n      url = url+\"/url/sentiment?url=\"+document.getElementById(\"textinput\").value;\r\n    } else {\r\n      url = url+\"/text/sentiment?text=\"+document.getElementById(\"textinput\").value;\r\n    }\r\n    fetch(url).then((response)=>{\r\n        response.text().then((data)=>{\r\n        this.setState({sentimentOutput:data});\r\n        let output = data;\r\n        if(data === \"positive\") {\r\n          output = <div style={{color:\"green\",fontSize:20}}>{data}</div>\r\n        } else if (data === \"negative\"){\r\n          output = <div style={{color:\"red\",fontSize:20}}>{data}</div>\r\n        } else {\r\n          output = <div style={{color:\"yellow\",fontSize:20}}>{data}</div>\r\n        }\r\n        this.setState({sentimentOutput:output});\r\n      })});\r\n  }\r\n\r\n  sendForEmotionAnalysis = () => {\r\n\r\n    this.setState({sentiment:false});\r\n    let url = '';\r\n    if(this.state.mode === \"url\") {\r\n      url = url+\"/url/emotion?url=\"+document.getElementById(\"textinput\").value;\r\n    } else {\r\n      url = url+\"/text/emotion?text=\"+document.getElementById(\"textinput\").value;\r\n    }\r\n    fetch(url).then((response)=>{\r\n      response.json().then((data)=>{\r\n      this.setState({sentimentOutput:<EmotionTable emotions={data}/>});\r\n  })})  ;\r\n  }\r\n  \r\n\r\n  render() {\r\n    return (  \r\n      <div className=\"App\">\r\n      <button className=\"btn btn-info\" onClick={this.renderTextArea}>Text</button>\r\n        <button className=\"btn btn-dark\"  onClick={this.renderTextBox}>URL</button>\r\n        <br/><br/>\r\n        {this.state.innercomp}\r\n        <br/>\r\n        <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</button>\r\n        <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>Analyze Emotion</button>\r\n        <br/>\r\n            {this.state.sentimentOutput}\r\n      </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}